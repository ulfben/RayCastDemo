Revision 1: 
- initalize SDL2 (window, renderer and inputs)
- copy-paste the original Ray.cpp
- Make Ray a class, use the constructor to accept the renderer and input manager. 
- Replace original "main" with a run()-method inside the Ray class
- comment out 143 lines of movement code (let's get rendering working first)
- replace original level loading- and parsing with an inline constexpr array
- write a facade to translate between the original dependencies and modern SDL: 
--- Eg: _moveto, _lineto, _setcolor, _drawrect, getch, clear, random
--- ignoring: _settextposition and drawing text on screen (let's keep it simple)
- replace all #defines' with typed- and scoped constexpr
- (manually) translate original color palette indexes to RGB values
- name all literals
- simplify and cache repeated math expressions where appropriate 
-- eg: 
    if (block==0)
        {

        _setcolor(15);
        _rectangle(_GBORDER,column*CELL_X_SIZE/4,row*CELL_Y_SIZE/4,
                    column*CELL_X_SIZE/4+CELL_X_SIZE/4-1,row*CELL_Y_SIZE/4+CELL_Y_SIZE/4-1);

        }
    else
        {

        _setcolor(2);
        _rectangle(_GFILLINTERIOR,column*CELL_X_SIZE/4,row*CELL_Y_SIZE/4,
                    column*CELL_X_SIZE/4+CELL_X_SIZE/4-1,row*CELL_Y_SIZE/4+CELL_Y_SIZE/4-1);

        }
-- becomes:
    if (block == 0){
        _setcolor(White);
        _rectangle(RectStyle::OUTLINE, left, top, right, bottom);
    }else{
        _setcolor(DarkGreen);
        _rectangle(RectStyle::FILL, left, top, right, bottom);
    }

Revision 2: 
- create a translation table for palette index -> rgba value. (allows me to use the original code without manually memorizing which number is what color)
- set up game loop for continual rendering. (this is why the 2D map is now visible. we painted over it previously)
- clean up the movement code:
--- move it to a function to give it a name: "updateViewPoint"
--- replace magical literals, simplify expressions, etc. as per above.
--- create a private ViewPoint type, make it a member and replace the local x/z/angle with this member. (enables further refactorings, as we can now break the 143 line function into constituent parts)
+ There's a crashing bug with the y-intersection going out of range, causing us to read out-of-bounds on the map and crashing. Temporary clamp the y-intersection value and come back later to debug the math.

Revision 3: 
- clean the RayCaster
--- replace magical literals, simplify expressions, etc. as per above. 
--- unhoist 31 stack variables - place them near first use, and update their type appropriately. (64bit OS, don't need to use long...)
--- 
- separate movement code and collision code in "updateViewPoint" by moving the collision stuff to "checkCollisions"
- separate movement code and view port-clearing code in "updateViewPoint", by moving the render calls to "clearViewPort". 
--- also: give names to all coordinates used for drawing the viewport.
- simplify checkCollision with a "bool isWall(x, y)"-helper function
+ bug: the thin white slices between wall sections are now drawn wrong

Revision 4: 
- add utilities "wrap" and "clamp" to get rid of repeated branching
- (declare and calculate currently implicit hard-coded settings: resolution, FOV, ray count etc)
- 


